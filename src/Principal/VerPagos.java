/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Principal;

import Clases.Conexion;
import Clases.Pago;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Reymundo Tenorio
 */
public class VerPagos extends javax.swing.JFrame {

    /**
     * Creates new form Estudiante
     */
    public VerPagos() {
        
         try{
        this.setIconImage (new ImageIcon(getClass().getResource("/Imagenes/Pagos.png")).getImage());
        }catch(NullPointerException ex){}
        
        initComponents();
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        PopupMenu = new javax.swing.JPopupMenu();
        MnItemModificar = new javax.swing.JMenuItem();
        TabbedPane = new org.edisoncor.gui.tabbedPane.TabbedPaneHeader();
        PanelVer = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbbusc = new javax.swing.JComboBox();
        btnbuscar = new javax.swing.JButton();
        txtbusc = new javax.swing.JTextField();
        btnMostrar = new javax.swing.JButton();
        btnMostrar1 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        btnmodify = new javax.swing.JButton();
        btncancel3 = new javax.swing.JButton();

        MnItemModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ModificarIcon.png"))); // NOI18N
        MnItemModificar.setMnemonic('m');
        MnItemModificar.setText("Modificar");
        MnItemModificar.setToolTipText("Modificar Revista");
        MnItemModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnItemModificarActionPerformed(evt);
            }
        });
        PopupMenu.add(MnItemModificar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ver Pagos");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        TabbedPane.setBackground(new java.awt.Color(0, 204, 204));
        TabbedPane.setColorDeBorde(new java.awt.Color(0, 204, 204));
        TabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TabbedPaneMousePressed(evt);
            }
        });
        TabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedPaneStateChanged(evt);
            }
        });

        PanelVer.setBackground(new java.awt.Color(235, 235, 150));
        PanelVer.setLayout(new javax.swing.BoxLayout(PanelVer, javax.swing.BoxLayout.LINE_AXIS));

        jPanel7.setBackground(new java.awt.Color(0, 153, 204));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(235, 235, 150));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar Pago", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel4.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Buscar Por: ");

        cmbbusc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbbusc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No.", "Fecha", "Nombres Suscriptor", "Apellidos Suscriptor", "Revista", "Monto Cuota", "No Cuotas", " " }));
        cmbbusc.setToolTipText("Buscar Por:");

        btnbuscar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnbuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnbuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/BuscarIcon.png"))); // NOI18N
        btnbuscar.setMnemonic('b');
        btnbuscar.setText("Buscar");
        btnbuscar.setToolTipText("Buscar Estudiante");
        btnbuscar.setContentAreaFilled(false);
        btnbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscarActionPerformed(evt);
            }
        });

        txtbusc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbuscKeyReleased(evt);
            }
        });
        /*txtbusc = new AutoComplete.AutoCompletar();

        ((AutoCompletar)txtbusc).setDesplegable(new DesplegableJPopUPMenu(txtbusc));

        ModeloAutoCompletar modelo1 = new ModeloVendNames();

        ((AutoCompletar)txtbusc).setModelo(modelo1);
        ((AutoCompletar)txtbusc).getDesplegable().setForeground(new Color(102,153,255));

        ((AutoCompletar)txtbusc).addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtbuscTyped(evt);
            }
        });

        ((AutoCompletar)txtbusc).setToolTipText("Ingresar Dato a Buscar");*/

        btnMostrar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnMostrar.setForeground(new java.awt.Color(255, 255, 255));
        btnMostrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/TodosIcon.png"))); // NOI18N
        btnMostrar.setMnemonic('b');
        btnMostrar.setText("Ver Todos");
        btnMostrar.setToolTipText("Mostrar Todos Los Estudiantes");
        btnMostrar.setContentAreaFilled(false);
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        btnMostrar1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnMostrar1.setForeground(new java.awt.Color(255, 255, 255));
        btnMostrar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ReiniciarIcon.png"))); // NOI18N
        btnMostrar1.setMnemonic('b');
        btnMostrar1.setText("Reiniciar");
        btnMostrar1.setToolTipText("Mostrar Todos Los Estudiantes");
        btnMostrar1.setContentAreaFilled(false);
        btnMostrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtbusc, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMostrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMostrar1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnbuscar)
                    .addComponent(txtbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMostrar)
                    .addComponent(btnMostrar1))
                .addContainerGap())
        );

        jPanel7.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setToolTipText("Lista de Estudiantes");
        jTable1.setComponentPopupMenu(PopupMenu);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(jTable1);

        jPanel7.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jPanel5.setBackground(new java.awt.Color(0, 102, 153));

        btnmodify.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnmodify.setForeground(new java.awt.Color(255, 255, 255));
        btnmodify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Modificar.png"))); // NOI18N
        btnmodify.setMnemonic('o');
        btnmodify.setText("Modificar");
        btnmodify.setToolTipText("Modificar Estudiante Seleccionado");
        btnmodify.setContentAreaFilled(false);
        btnmodify.setEnabled(false);
        btnmodify.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnmodify.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnmodify.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnmodifyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnmodifyFocusLost(evt);
            }
        });
        btnmodify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmodifyActionPerformed(evt);
            }
        });
        jPanel5.add(btnmodify);

        btncancel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btncancel3.setForeground(new java.awt.Color(255, 255, 255));
        btncancel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        btncancel3.setMnemonic('c');
        btncancel3.setText("Cancelar");
        btncancel3.setToolTipText("Cancelar / Salir");
        btncancel3.setContentAreaFilled(false);
        btncancel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btncancel3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btncancel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel3ActionPerformed(evt);
            }
        });
        jPanel5.add(btncancel3);

        jPanel7.add(jPanel5, java.awt.BorderLayout.SOUTH);

        PanelVer.add(jPanel7);

        TabbedPane.addTab("Ver Pagos", PanelVer);

        getContentPane().add(TabbedPane, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1209, 722));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private int ID_Revista;
    private boolean Modify;
    private String File;
    private MenuPrincipal MP;
    

   
    
    public void setMP(MenuPrincipal MP) {
        this.MP = MP;
    }
    
    
    public static ResultSet resultado;

   
      
    
    
   
    
   public void ActualizarTabla(){
        
        
       model.setRowCount(0);
       jTable1.setModel(model);
       
      
        try{
            
        
        resultado = Conexion.consulta("Select * from pagov");

        
       
     
       while (resultado.next())
       {     
              Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
   
    }
       
       jTable1.setModel(model);
    
   
//        jTable1.getColumnModel().getColumn( 10 ).setCellEditor( new Celda_CheckBox() );
//        //para pintar la columna con el CheckBox en la tabla, en este caso, la primera columna
//        jTable1.getColumnModel().getColumn( 10 ).setCellRenderer(new Render_CheckBox());      

        
    }   catch (SQLException ex) {
      JOptionPane.showMessageDialog(null,ex.getMessage()); 
    }
        
          
    }
   
   

   
    
    public void Buscar(){
     
        int index = cmbbusc.getSelectedIndex()+1;

        switch(index){

            case 1:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where ID_Pago = '"+Buscar+"'");

                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
          
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No. de Pago No Encontrado");
            }

            break;

            case 2:
                
                
            try{
              
               model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where Fecha = '"+Buscar+"'");

                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
                
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Fecha del Pago No Encontrado");
            }

            break;
                
            case 3:
                
            try{
            model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where Nombres = '"+Buscar+"'");

                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
          
   
                
                }
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Nombres del Suscriptor No Encontrado");
            }
          
            break;
           
            case 4:
                
                  try{
             model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where Apellidos = '"+Buscar+"'");

                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
          
   
                }
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Apellidos del Suscriptor No Encontrado");
            }
            

            break;
            
            case 5:
                
                  try{
                   
               model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where Titulo = '"+Buscar+"'");

                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
          
   
                }
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Titulo de La Revista No Encontrado");
            }
            

            break;
            
       case 6:
                
                  try{
                   
               model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where Cuota = '"+Buscar+"'");

                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
          
   
                }
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Cuota de La Revista No Encontrado");
            }
            

            break;
            
           case 7:
                
                  try{
                   
               model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where No_Cuotas = '"+Buscar+"'");

                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
          
   
                }
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No. Cuotas del Pago No Encontrado");
            }
            

            break;
            
       
            default:

            break;

          
        
        }
        
        ReiniciarTabla();
        jTable1.setModel(model);
        
        
    }
    
    
    private void btnbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscarActionPerformed

        Buscar();
        
        // TODO add your handling code here:
    }//GEN-LAST:event_btnbuscarActionPerformed

    private void txtbuscKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbuscKeyReleased
        int index = cmbbusc.getSelectedIndex()+1;

        switch(index){

          
           case 1:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where ID_Pago like '%"+Buscar+"%'");


                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
          
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No. de Pago No Encontrado");
            }

            break;

            case 2:
                
                
            try{
              
               model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where Fecha like '%"+Buscar+"%'");


                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
                
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Fecha del Pago No Encontrado");
            }

            break;
                
            case 3:
                
            try{
            model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where Nombres like '%"+Buscar+"%'");


                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
          
   
                
                }
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Nombres del Suscriptor No Encontrado");
            }
          
            break;
           
            case 4:
                
                  try{
             model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where Apellidos like '%"+Buscar+"%'");


                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
          
   
                }
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Apellidos del Suscriptor No Encontrado");
            }
            

            break;
            
            case 5:
                
                  try{
                   
               model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where Titulo like '%"+Buscar+"%'");


                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
          
   
                }
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Titulo de La Revista No Encontrado");
            }
            

            break;
            
       case 6:
                
                  try{
                   
               model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where Cuota like '%"+Buscar+"%'");


                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
          
   
                }
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Cuota de La Revista No Encontrado");
            }
            

            break;
            
           case 7:
                
                  try{
                   
               model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from pagov where No_Cuotas like '%"+Buscar+"%'");


                while (resultado.next())
                {
              
             Object [] Datos = new Object [7]; 

            
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              Datos [5]= String.valueOf(resultado.getInt(6)); 
              Datos [6]= String.valueOf(resultado.getInt(7)); 
              
              model.addRow(Datos);  
          
   
                }
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No. Cuotas del Pago No Encontrado");
            }
            

            break;
            
       
            default:

            break;
          
        
        }
        ReiniciarTabla();
        jTable1.setModel(model);
        
                // TODO add your handling code here:
    }//GEN-LAST:event_txtbuscKeyReleased

 
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
      ActivarBotones();
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusLost
        
  ActivarBotones(); // TODO add your handling code here:
    }//GEN-LAST:event_jTable1FocusLost

      
    public void Modificar(){
        
      ActivarBotones();
      
      
      
        int fila = jTable1.getSelectedRow();

        int ID;
        String Nombres,Apellidos, Revista,Cuota, NoCuota;  
        Date Fecha = null;
        
        if (fila > -1){

            ID= Integer.parseInt(this.jTable1.getModel().getValueAt(fila, 0).toString()); 
            Nombres=((String)this.jTable1.getModel().getValueAt(fila, 2));
            Apellidos=((String)this.jTable1.getModel().getValueAt(fila, 3));
            Revista =((String)this.jTable1.getModel().getValueAt(fila, 4));
            Cuota =((String)this.jTable1.getModel().getValueAt(fila, 5));
            NoCuota =((String)this.jTable1.getModel().getValueAt(fila, 6));
            
            
        
      try{
          
          resultado = Conexion.consulta("Select Fecha from pagov where ID_Pago ="+ID);
          
          while(resultado.next()){
              Fecha = resultado.getDate(1);
          }
          
      }catch(SQLException ex){
          
      }
      
      long Date = Fecha.getTime();
      String Suscriptor = Nombres.trim().concat(" ").concat(Apellidos.trim());
      
      PagoP PP = new PagoP();
      PP.setModify(true);
      PP.setVP(this);
      PP.Datos(Suscriptor, Revista, Cuota, NoCuota, ID);
      PP.setVisible(true);
      

        }

        else{

            JOptionPane.showMessageDialog(this, "Seleccione Un Pago a Modificar", "Error", JOptionPane.ERROR_MESSAGE);

        }

    }
    
    private void TabbedPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabbedPaneMousePressed
      
        // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneMousePressed

    private void TabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedPaneStateChanged
       
         // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    
     ReiniciarTabla();
     
        
// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    MP.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    
    public void ActivarBotones(){
    

      int Fila = jTable1.getSelectedRow();
        
  

        if (Fila > -1){

            btnmodify.setEnabled(true);
            


//            if("Activo".equalsIgnoreCase(Estado)){
//                btnActivar.setText("Desactivar");
//                btnActivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
//            }
//            if("Inactivo".equalsIgnoreCase(Estado)){
//                btnActivar.setText("Activar");
//                btnActivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
//            }
   
        }
        else{
            btnmodify.setEnabled(false);
    
        }  
      

      
        if (Fila > -1){
              btnmodify.setEnabled(true);
        }
        else{
              btnmodify.setEnabled(false);
        }
    }
    
    private void jTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusGained
  ActivarBotones();     // TODO add your handling code here:
    }//GEN-LAST:event_jTable1FocusGained

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
     ActivarBotones();// TODO add your handling code here:
    }//GEN-LAST:event_jTable1MousePressed

   
    
    private void MnItemModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnItemModificarActionPerformed
Modificar();      // TODO add your handling code here:
    }//GEN-LAST:event_MnItemModificarActionPerformed

   public void ReiniciarTabla(){
        
        Object [] Titulo = {"No.","Fecha", "Nombres Suscriptor", "Apellidos Suscriptor", "Título",
            "Monto de Cuota", "No. Cuotas"};
        
        model.setColumnIdentifiers(Titulo);
                
        
        this.jTable1.setModel(model);
    
        ActualizarTabla();     
    }
    
    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed

        ReiniciarTabla();
      
               // TODO add your handling code here:
    }//GEN-LAST:event_btnMostrarActionPerformed

    private void btncancel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel3ActionPerformed
        MP.setVisible(true);
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btncancel3ActionPerformed

    private void btnmodifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmodifyActionPerformed
        Modificar();
    }//GEN-LAST:event_btnmodifyActionPerformed

    private void btnmodifyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnmodifyFocusLost
        ActivarBotones();    // TODO add your handling code here:
    }//GEN-LAST:event_btnmodifyFocusLost

    private void btnmodifyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnmodifyFocusGained
        ActivarBotones();

        // TODO add your handling code here:
    }//GEN-LAST:event_btnmodifyFocusGained

    private void btnMostrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrar1ActionPerformed

     int a = JOptionPane.showConfirmDialog(this, "Está Seguro Que Quiere Reiniciar Las Cuotas? ","Seguro?",JOptionPane.YES_NO_OPTION);
     
     if(a==JOptionPane.YES_OPTION){
         
         
         
         Pago.Reiniciar_Pago();
     
     }
        


// TODO add your handling code here:
    }//GEN-LAST:event_btnMostrar1ActionPerformed

    
    
    DefaultTableModel model = new DefaultTableModel() {

        
        
    Class[] types = new Class [] {
  
        java.lang.String.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, 
    };
 

    @Override
    public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
    }

  

    @Override
    public boolean isCellEditable(int row, int column) {
    
            return false;
    
    
    }
};
    
    

     /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
        }
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new VerPagos().setVisible(true);
        });
}  
     
   

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MnItemModificar;
    private javax.swing.JPanel PanelVer;
    private javax.swing.JPopupMenu PopupMenu;
    private org.edisoncor.gui.tabbedPane.TabbedPaneHeader TabbedPane;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JButton btnMostrar1;
    private javax.swing.JButton btnbuscar;
    private javax.swing.JButton btncancel3;
    private javax.swing.JButton btnmodify;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbbusc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtbusc;
    // End of variables declaration//GEN-END:variables
}
